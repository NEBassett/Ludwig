#version 440 core

#define M_PI 3.14

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform float factor;

layout(binding = 0, r32f) readonly uniform image2D A;
layout(binding = 1, r32f) readonly uniform image1D v;
layout(binding = 2, r32f) readonly uniform image1D r;
layout(binding = 3, r32f) coherent uniform image1D b;
layout(binding = 4, r32i) coherent uniform iimage1D locks;

void main()
{
  int id = int(gl_GlobalInvocationID.x);
  int product = int(gl_GlobalInvocationID.y);
  bool finished = false;

  float term = factor*imageLoad(A, ivec2(id, product)).x*imageLoad(v, product).x;
  if(product == 0)
  {
    term += imageLoad(r, id).x; // add the r in somewhere
  }

  while(!finished)
  {
    if(imageAtomicCompSwap(locks, id, 0, 1) == 0)
    {
      term += imageLoad(b, id).x;

      imageStore(b, id, term.xxxx);

      finished = true;

      imageAtomicExchange(locks, id, 0); // unlock!
    }
  }
}
