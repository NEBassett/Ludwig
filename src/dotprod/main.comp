#version 440 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, r32f) readonly uniform image1D a;
layout(binding = 1, r32f) readonly uniform image1D b;
layout(binding = 2, r32f) coherent uniform image1D c;
layout(binding = 3, r32i) coherent uniform iimage1D locks;



void main()
{
  int id = int(gl_GlobalInvocationID.x);

  bool finished = false;
  float term = imageLoad(b, id).x*imageLoad(a, id).x;

  while(!finished)
  {
    barrier();
    memoryBarrier();
    if(imageAtomicCompSwap(locks, 0, 0, 1).x == 0)
    {
      float new = imageLoad(c, 0).x + term;
      imageStore(c, 0, vec4(new));
      finished = true;
      imageAtomicExchange(locks, 0, 0); // release ownership
    }
  }
}
